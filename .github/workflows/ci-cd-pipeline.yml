name: 🚀 Quantum Trading Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar tests cada día a las 6:00 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: quantum_trading_test

jobs:
  # ===============================
  # 🧪 TESTING & QUALITY ASSURANCE
  # ===============================
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-dev.txt

    - name: 🔍 Code Quality - Black
      run: black --check src/ tests/

    - name: 🔍 Code Quality - isort
      run: isort --check-only src/ tests/

    - name: 🔍 Code Quality - flake8
      run: flake8 src/ tests/

    - name: 🔍 Type Checking - mypy
      run: mypy src/

    - name: 🧪 Run Tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=test-results.xml \
          -v
      env:
        DATABASE_URL: postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: 📋 Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: test-results.xml

  test-frontend:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/dashboard/package-lock.json

    - name: 📦 Install Dependencies
      working-directory: frontend/dashboard
      run: npm ci

    - name: 🔍 Lint TypeScript
      working-directory: frontend/dashboard
      run: npm run lint

    - name: 🔍 Type Check
      working-directory: frontend/dashboard
      run: npm run type-check

    - name: 🧪 Run Tests
      working-directory: frontend/dashboard
      run: npm run test:coverage

    - name: 🏗️ Build Production
      working-directory: frontend/dashboard
      run: npm run build

    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/dashboard/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # ===============================
  # 🛡️ SECURITY SCANNING
  # ===============================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy Security Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📋 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Python Security Scan
      run: |
        pip install safety bandit
        safety check --json
        bandit -r src/ -f json

  # ===============================
  # 🐳 DOCKER BUILD & PUSH
  # ===============================
  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and Push Trading Engine
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.trading-engine
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/quantum-trading-engine:latest
          ${{ secrets.DOCKER_USERNAME }}/quantum-trading-engine:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and Push API Server
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/quantum-api:latest
          ${{ secrets.DOCKER_USERNAME }}/quantum-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and Push Dashboard
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/dashboard
        file: ./frontend/dashboard/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/quantum-dashboard:latest
          ${{ secrets.DOCKER_USERNAME }}/quantum-dashboard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===============================
  # 🚀 DEPLOYMENT
  # ===============================
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí se integraría con tu plataforma de despliegue
        # Ejemplo: kubectl, docker-compose, etc.

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Despliegue a producción con medidas adicionales de seguridad

  # ===============================
  # 📊 PERFORMANCE MONITORING
  # ===============================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Performance Tools
      run: |
        pip install locust pytest-benchmark

    - name: ⚡ Run Load Tests
      run: |
        cd tests/performance
        locust --headless --users 100 --spawn-rate 10 --run-time 300s --host ${{ vars.STAGING_URL }}

    - name: 📊 Benchmark Tests
      run: |
        pytest tests/benchmarks/ --benchmark-json=benchmark-results.json

    - name: 📋 Upload Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  # ===============================
  # 📈 RELEASE MANAGEMENT
  # ===============================
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Generate Version
      id: version
      run: |
        VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 📝 Generate Changelog
      id: changelog
      run: |
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🚀 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## 🚀 Quantum Trading Platform Release v${{ steps.version.outputs.version }}
          
          ### 📋 Changes:
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🐳 Docker Images:
          - Trading Engine: `${{ secrets.DOCKER_USERNAME }}/quantum-trading-engine:${{ github.sha }}`
          - API Server: `${{ secrets.DOCKER_USERNAME }}/quantum-api:${{ github.sha }}`
          - Dashboard: `${{ secrets.DOCKER_USERNAME }}/quantum-dashboard:${{ github.sha }}`
        draft: false
        prerelease: false

  # ===============================
  # 🧹 CLEANUP
  # ===============================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()

    steps:
    - name: 🧹 Clean up old artifacts
      run: |
        echo "Cleaning up old build artifacts..."
        # Limpiar imágenes Docker antiguas, artefactos, etc.